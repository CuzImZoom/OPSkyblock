/*
If you need to build, run:

gradlew clean build shadowJar
*/




plugins {
    id 'java'
    id 'com.github.johnrengelman.shadow' version '6.1.0'
}

group 'de.zoom'
version '1.0.0'

sourceCompatibility = '1.8'
targetCompatibility = '1.8'

repositories {
    mavenCentral()

    maven {
        url = 'https://hub.spigotmc.org/nexus/content/repositories/snapshots/'

        // As of Gradle 5.1, you can limit this to only those
        // dependencies you expect from it
        content {
            includeGroup 'org.bukkit'
            includeGroup 'org.spigotmc'
        }
    }
    /*
     As Spigot-API depends on the Bungeecord ChatComponent-API,
    we need to add the Sonatype OSS repository, as Gradle,
    in comparison to maven, doesn't want to understand the ~/.m2
    directory unless added using mavenLocal(). Maven usually just gets
    it from there, as most people have run the BuildTools at least once.
    This is therefore not needed if you're using the full Spigot/CraftBukkit,
    or if you're using the Bukkit API.
    */
    maven { url = 'https://oss.sonatype.org/content/repositories/snapshots' }
    maven { url = 'https://oss.sonatype.org/content/repositories/central' }
    mavenLocal() // This is needed for CraftBukkit and Spigot.
}

dependencies {
    compileOnly 'org.spigotmc:spigot-api:1.8.8-R0.1-SNAPSHOT' // The Spigot API with no shadowing. Requires the OSS repo.

    compileOnly 'org.projectlombok:lombok:1.18.20' // Lombok is a great utility to speed up coding time.
    annotationProcessor 'org.projectlombok:lombok:1.18.20'

    implementation 'org.mongodb:mongo-java-driver:3.12.9'
    implementation 'me.lucko:helper:5.6.8' // This right here is the library that saves hours of time.
    implementation 'me.lucko:shadow-bukkit:1.7-SNAPSHOT'

    // compileOnly keyword means that it won't put the dependency into the plugin's jar
    // implementation keyword means that it will put the dependency into the plugin's jar
}

// This task right here takes the implementation packages and shades them into the final JAR
shadowJar {
    project.configurations.implementation.canBeResolved = true
    configurations = [project.configurations.implementation]
    archiveBaseName.set('OPSkyblock')
    archiveClassifier.set('')
}